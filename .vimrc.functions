" /* vim: set fdm=marker: */

" -- g:gitdiffCurrent() {{{
function! g:gitdiffCurrent()

  let name = 'git-diff'
  let tabno = tabpagenr()
  let file = expand('%:p')
  let pos = getpos('.')

  call system('git rev-parse --is-inside-work-tree &>/dev/null >&2')
  "call system('ls -a')
  if v:shell_error == 0
    execute('tabe '.name) | execute('r !git diff ' . file)
    let newtabno = tabpagenr()
    setl ft=diff buftype=nofile noswapfile nobuflisted
  else
    echo "Not in git dir ".file
  endif
endfunction
" }}}

" -- g:ginger() {{{
" based on https://gist.github.com/mattn/5457352
function! g:ginger(text)
  let s:endpoint = 'http://services.gingersoftware.com/Ginger/correct/json/GingerTheText'
  let s:apikey = '6ae0c3a0-afdc-4532-a810-82ded0054236'
  let res = webapi#json#decode(webapi#http#get(s:endpoint, {
        \ 'lang': 'US',
        \ 'clientVersion': '2.0',
        \ 'apiKey': s:apikey,
        \ 'text': a:text}).content)
  let i = 0
  let correct = ''
  echon "Mistake: "
  for rs in res['LightGingerTheTextResult']
    let [from, to] = [rs['From'], rs['To']]
    if i < from
      echon a:text[i : from-1]
      let correct .= a:text[i : from-1]
    endif
    if len(rs['Suggestions']) > 0 && has_key(rs['Suggestions'][0], 'Text')
      echohl WarningMsg
      echon a:text[from : to]
      echohl None
      let correct .= rs['Suggestions'][0]['Text']
    else
      echon a:text[from : to]
      let correct .= a:text[from : to]
    endif
    let i = to + 1
  endfor
  if i < len(a:text)
    echon a:text[i :]
    let correct .= a:text[i :]
  endif
  echon "\nCorrect: ".correct
  " this is
  " Edit memcached
endfunction

function! g:ginger_user_op(motion_wise)
  let text = s:operator_user_text(a:motion_wise)
  call g:ginger(text)
endfunction
" }}}

" -- s:operator_user_text() {{{
function! s:operator_user_text(motion_wiseness)
  " https://github.com/tyru/operator-html-escape.vim/blob/master/autoload/operator/html_escape.vim
  try
    " For saving &selection. See :help :map-operator
    let sel_save = &l:selection
    let &l:selection = "inclusive"
    " Save @@.
    let reg_save     = getreg('z', 1)
    let regtype_save = getregtype('z')

    if a:motion_wiseness == 'char'
        let ex = '`[v`]"zy'
    elseif a:motion_wiseness == 'line'
        let ex = '`[V`]"zy'
    elseif a:motion_wiseness == 'block'
        let ex = '`[' . "\<C-v>" . '`]"zy'
    else
        " silent execute 'normal! `<' . a:motion_wiseness . '`>'
        echoerr 'internal error, sorry: this block never be reached'
    endif
    execute 'silent normal!' ex
    return @z
  finally
    let &l:selection = sel_save
    call setreg('z', reg_save, regtype_save)
  endtry
endfunction
" }}}
